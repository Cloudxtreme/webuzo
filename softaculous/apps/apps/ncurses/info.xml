<soft xmlns="http://www.softaculous.com">
	<overview>
		<img src="logo.gif" style="float:right;" alt="" />{{overview}}
	</overview>
	<features>
		{{features}}
	</features>
	<ratings>
		http://www.webuzo.com/sysapps/libraries/ncurses
	</ratings>
	<space>
		14635008
	</space>
	<support>
		http://www.gnu.org/software/ncurses/
	</support>
	<version>
		5.9
	</version>
	<mod>3</mod>
	<softversion>
		4.1.9
	</softversion>
	<major>1</major>	
	<release_date>04-04-2011</release_date>
	
	<extract file="ncurses-$arch.tar.gz">$appsdir</extract>	
	
	<remove></remove>
	
	<notes>
		<center><font size="5" color="#182e7a">Nurses :</font></center><br />
		<style>
.notestable td{
background: #E6F5FF;
}

.notestable th{
background: #EFEFEF;
}
		</style>
		<table border="0" cellspacing="1" cellpadding="8" align="center" class="notestable">
			<tr>
				<th>Desc</th>
				<th>Path</th>
			</tr>
			<tr>
				<td>Binary</td>
				<td>/usr/local/apps/bin</td>
			</tr>
			<tr>
				<td>Library</td>
				<td>/usr/local/apps/lib</td>
			</tr>
			<tr>
				<td>libncurses.so</td>
				<td>/usr/local/apps/lib/libncurses.so</td>
			</tr>
		</table>
	</notes>
	<languages>
		<english-overview>
		<font size="5" color="#182e7a">Ncurses</font> (new curses) library is a free software emulation of curses in System V Release 4.0, and more. It uses Terminfo format, supports pads and color and multiple highlights and forms characters and function-key mapping, and has all the other SYSV-curses enhancements over BSD Curses.

The ncurses code was developed under GNU/Linux. It has been in use for some time with OpenBSD as the system curses library, and on FreeBSD and NetBSD as an external package. It should port easily to any ANSI/POSIX-conforming UNIX. It has even been ported to OS/2 Warp!
		<br /><br />
		Ncurses is distributed under the <a href="http://www.gnu.org/licenses/licenses.html#GPL" target="_blank">GNU General Public License</a>
		</english-overview>
		<english-features>
		<h1>Features of Ncurses</h1>The Ncurses package is fully
		  compatible with SVr4 (System V Release 4) curses:

		  <ul>
			<li>All 257 of the SVr4 calls have been implemented (and are
			documented).</li>

			<li>Full support for SVr4 curses features including keyboard
			mapping, color, forms-drawing with ACS characters, and
			automatic recognition of keypad and function keys.</li>

			<li>An emulation of the SVr4 panels library, supporting a stack
			of windows with backing store, is included.</li>

			<li>An emulation of the SVr4 menus library, supporting a
			uniform but flexible interface for menu programming, is
			included.</li>

			<li>An emulation of the SVr4 form library, supporting data
			collection through on-screen forms, is included.</li>

			<li>Binary terminfo entries generated by the Ncurses tic
			implementation are bit-for-bit-compatible with the entry format
			SVr4 curses uses.</li>

			<li>The utilities have options to allow you to filter terminfo
			entries for use with less capable
			<strong>Curses</strong>/<strong>Terminfo</strong> versions such
			as the HP/UX and AIX ports.</li>
		  </ul>The Ncurses package also has many useful extensions over
		  SVr4:

		  <ul>
			<li>The API is 8-bit clean and base-level conformant with the
			X/OPEN curses specification, XSI curses (that is, it implements
			all BASE level features, and most EXTENDED features). It
			includes many function calls not supported under SVr4 curses
			(but portability of all calls is documented so you can use the
			SVr4 subset only).</li>

			<li>Unlike SVr3 curses, Ncurses can write to the
			rightmost-bottommost corner of the screen if your terminal has
			an insert-character capability.</li>

			<li>Ada95 and C++ bindings.</li>

			<li>Support for mouse event reporting with X Window xterm and
			FreeBSD and OS/2 console windows.</li>

			<li>Extended mouse support via Alessandro Rubini's gpm
			package.</li>

			<li>The function <code>wresize</code> allows you to resize
			windows, preserving their data.</li>

			<li>The function <code>use_default_colors</code> allows you to
			use the terminal's default colors for the default color pair,
			achieving the effect of transparent colors.</li>

			<li>The functions <code>keyok</code> and
			<code>define_key</code> allow you to better control the use of
			function keys, e.g., disabling the Ncurses KEY_MOUSE, or by
			defining more than one control sequence to map to a given key
			code.</li>

			<li>Support for 256-color terminals, such as modern xterm, when
			configured using the <code>--enable-ext-colors</code>
			option.</li>

			<li>Support for 16-color terminals, such as <em>aixterm</em>
			and <em>modern xterm</em>.</li>

			<li>Better cursor-movement optimization. The package now
			features a cursor-local-movement computation more efficient
			than either BSD's or System V's.</li>

			<li>Super hardware scrolling support. The screen-update code
			incorporates a novel, simple, and cheap algorithm that enables
			it to make optimal use of hardware scrolling, line-insertion,
			and line-deletion for screen-line movements. This algorithm is
			more powerful than the 4.4BSD Curses <code>quickch</code>
			routine.</li>

			<li>Real support for terminals with the magic-cookie glitch.
			The screen-update code will refrain from drawing a highlight if
			the magic- cookie unattributed spaces required just before the
			beginning and after the end would step on a non-space
			character. It will automatically shift highlight boundaries
			when doing so would make it possible to draw the highlight
			without changing the visual appearance of the screen.</li>

			<li>It is possible to generate the library with a list of
			pre-loaded fallback entries linked to it so that it can serve
			those terminal types even when no terminfo tree or termcap file
			is accessible (this may be useful for support of
			screen-oriented programs that must run in single-user
			mode).</li>

			<li>The tic/captoinfo utility provided with Ncurses has the
			ability to translate many termcaps from the XENIX, IBM and
			AT&amp;T extension sets.</li>

			<li>A BSD-like tset utility is provided.</li>

			<li>The Ncurses library and utilities will automatically read
			terminfo entries from $HOME/.terminfo if it exists, and compile
			to that directory if it exists and the user has no write access
			to the system directory. This feature makes it easier for users
			to have personal terminfo entries without giving up access to
			the system terminfo directory.</li>

			<li>You may specify a path of directories to search for
			compiled descriptions with the environment variable
			TERMINFO_DIRS (this generalizes the feature provided by
			TERMINFO under stock System V.)</li>

			<li>In terminfo source files, use capabilities may refer not
			just to other entries in the same source file (as in System V)
			but also to compiled entries in either the system terminfo
			directory or the user's $HOME/.terminfo directory.</li>

			<li>A script (<strong>capconvert</strong>) is provided to help
			BSD users transition from termcap to terminfo. It gathers the
			information in a TERMCAP environment variable and/or a
			~/.termcap local entries file and converts it to an equivalent
			local terminfo tree under $HOME/.terminfo.</li>

			<li>Automatic fallback to the /etc/termcap file can be compiled
			in when it is not possible to build a terminfo tree. This
			feature is neither fast nor cheap, you don't want to use it
			unless you have to, but it's there.</li>

			<li>The table-of-entries utility <strong>toe</strong> makes it
			easy for users to see exactly what terminal types are available
			on the system.</li>

			<li>The library meets the XSI requirement that every macro
			entry point have a corresponding function which may be linked
			(and will be prototype-checked) if the macro definition is
			disabled with <code>#undef</code>.</li>

			<li>An HTML "Introduction to Programming with NCURSES" document
			provides a narrative introduction to the curses programming
			interface.</li>
		  </ul>
		</english-features>
	</languages>
</soft>